package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/dir01/mediary.Downloader -o ./mocks/downloader_mock.go

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_mediary "github.com/dir01/mediary"
	"github.com/gojuno/minimock/v3"
)

// DownloaderMock implements mediary.Downloader
type DownloaderMock struct {
	t minimock.Tester

	funcGetMetadata          func(ctx context.Context, url string) (mp1 *mm_mediary.Metadata, err error)
	inspectFuncGetMetadata   func(ctx context.Context, url string)
	afterGetMetadataCounter  uint64
	beforeGetMetadataCounter uint64
	GetMetadataMock          mDownloaderMockGetMetadata

	funcMatches          func(url string) (b1 bool)
	inspectFuncMatches   func(url string)
	afterMatchesCounter  uint64
	beforeMatchesCounter uint64
	MatchesMock          mDownloaderMockMatches
}

// NewDownloaderMock returns a mock for mediary.Downloader
func NewDownloaderMock(t minimock.Tester) *DownloaderMock {
	m := &DownloaderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMetadataMock = mDownloaderMockGetMetadata{mock: m}
	m.GetMetadataMock.callArgs = []*DownloaderMockGetMetadataParams{}

	m.MatchesMock = mDownloaderMockMatches{mock: m}
	m.MatchesMock.callArgs = []*DownloaderMockMatchesParams{}

	return m
}

type mDownloaderMockGetMetadata struct {
	mock               *DownloaderMock
	defaultExpectation *DownloaderMockGetMetadataExpectation
	expectations       []*DownloaderMockGetMetadataExpectation

	callArgs []*DownloaderMockGetMetadataParams
	mutex    sync.RWMutex
}

// DownloaderMockGetMetadataExpectation specifies expectation struct of the Downloader.GetMetadata
type DownloaderMockGetMetadataExpectation struct {
	mock    *DownloaderMock
	params  *DownloaderMockGetMetadataParams
	results *DownloaderMockGetMetadataResults
	Counter uint64
}

// DownloaderMockGetMetadataParams contains parameters of the Downloader.GetMetadata
type DownloaderMockGetMetadataParams struct {
	ctx context.Context
	url string
}

// DownloaderMockGetMetadataResults contains results of the Downloader.GetMetadata
type DownloaderMockGetMetadataResults struct {
	mp1 *mm_mediary.Metadata
	err error
}

// Expect sets up expected params for Downloader.GetMetadata
func (mmGetMetadata *mDownloaderMockGetMetadata) Expect(ctx context.Context, url string) *mDownloaderMockGetMetadata {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Set")
	}

	if mmGetMetadata.defaultExpectation == nil {
		mmGetMetadata.defaultExpectation = &DownloaderMockGetMetadataExpectation{}
	}

	mmGetMetadata.defaultExpectation.params = &DownloaderMockGetMetadataParams{ctx, url}
	for _, e := range mmGetMetadata.expectations {
		if minimock.Equal(e.params, mmGetMetadata.defaultExpectation.params) {
			mmGetMetadata.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetMetadata.defaultExpectation.params)
		}
	}

	return mmGetMetadata
}

// Inspect accepts an inspector function that has same arguments as the Downloader.GetMetadata
func (mmGetMetadata *mDownloaderMockGetMetadata) Inspect(f func(ctx context.Context, url string)) *mDownloaderMockGetMetadata {
	if mmGetMetadata.mock.inspectFuncGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("Inspect function is already set for DownloaderMock.GetMetadata")
	}

	mmGetMetadata.mock.inspectFuncGetMetadata = f

	return mmGetMetadata
}

// Return sets up results that will be returned by Downloader.GetMetadata
func (mmGetMetadata *mDownloaderMockGetMetadata) Return(mp1 *mm_mediary.Metadata, err error) *DownloaderMock {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Set")
	}

	if mmGetMetadata.defaultExpectation == nil {
		mmGetMetadata.defaultExpectation = &DownloaderMockGetMetadataExpectation{mock: mmGetMetadata.mock}
	}
	mmGetMetadata.defaultExpectation.results = &DownloaderMockGetMetadataResults{mp1, err}
	return mmGetMetadata.mock
}

//Set uses given function f to mock the Downloader.GetMetadata method
func (mmGetMetadata *mDownloaderMockGetMetadata) Set(f func(ctx context.Context, url string) (mp1 *mm_mediary.Metadata, err error)) *DownloaderMock {
	if mmGetMetadata.defaultExpectation != nil {
		mmGetMetadata.mock.t.Fatalf("Default expectation is already set for the Downloader.GetMetadata method")
	}

	if len(mmGetMetadata.expectations) > 0 {
		mmGetMetadata.mock.t.Fatalf("Some expectations are already set for the Downloader.GetMetadata method")
	}

	mmGetMetadata.mock.funcGetMetadata = f
	return mmGetMetadata.mock
}

// When sets expectation for the Downloader.GetMetadata which will trigger the result defined by the following
// Then helper
func (mmGetMetadata *mDownloaderMockGetMetadata) When(ctx context.Context, url string) *DownloaderMockGetMetadataExpectation {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Set")
	}

	expectation := &DownloaderMockGetMetadataExpectation{
		mock:   mmGetMetadata.mock,
		params: &DownloaderMockGetMetadataParams{ctx, url},
	}
	mmGetMetadata.expectations = append(mmGetMetadata.expectations, expectation)
	return expectation
}

// Then sets up Downloader.GetMetadata return parameters for the expectation previously defined by the When method
func (e *DownloaderMockGetMetadataExpectation) Then(mp1 *mm_mediary.Metadata, err error) *DownloaderMock {
	e.results = &DownloaderMockGetMetadataResults{mp1, err}
	return e.mock
}

// GetMetadata implements mediary.Downloader
func (mmGetMetadata *DownloaderMock) GetMetadata(ctx context.Context, url string) (mp1 *mm_mediary.Metadata, err error) {
	mm_atomic.AddUint64(&mmGetMetadata.beforeGetMetadataCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMetadata.afterGetMetadataCounter, 1)

	if mmGetMetadata.inspectFuncGetMetadata != nil {
		mmGetMetadata.inspectFuncGetMetadata(ctx, url)
	}

	mm_params := &DownloaderMockGetMetadataParams{ctx, url}

	// Record call args
	mmGetMetadata.GetMetadataMock.mutex.Lock()
	mmGetMetadata.GetMetadataMock.callArgs = append(mmGetMetadata.GetMetadataMock.callArgs, mm_params)
	mmGetMetadata.GetMetadataMock.mutex.Unlock()

	for _, e := range mmGetMetadata.GetMetadataMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp1, e.results.err
		}
	}

	if mmGetMetadata.GetMetadataMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMetadata.GetMetadataMock.defaultExpectation.Counter, 1)
		mm_want := mmGetMetadata.GetMetadataMock.defaultExpectation.params
		mm_got := DownloaderMockGetMetadataParams{ctx, url}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetMetadata.t.Errorf("DownloaderMock.GetMetadata got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetMetadata.GetMetadataMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMetadata.t.Fatal("No results are set for the DownloaderMock.GetMetadata")
		}
		return (*mm_results).mp1, (*mm_results).err
	}
	if mmGetMetadata.funcGetMetadata != nil {
		return mmGetMetadata.funcGetMetadata(ctx, url)
	}
	mmGetMetadata.t.Fatalf("Unexpected call to DownloaderMock.GetMetadata. %v %v", ctx, url)
	return
}

// GetMetadataAfterCounter returns a count of finished DownloaderMock.GetMetadata invocations
func (mmGetMetadata *DownloaderMock) GetMetadataAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMetadata.afterGetMetadataCounter)
}

// GetMetadataBeforeCounter returns a count of DownloaderMock.GetMetadata invocations
func (mmGetMetadata *DownloaderMock) GetMetadataBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMetadata.beforeGetMetadataCounter)
}

// Calls returns a list of arguments used in each call to DownloaderMock.GetMetadata.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetMetadata *mDownloaderMockGetMetadata) Calls() []*DownloaderMockGetMetadataParams {
	mmGetMetadata.mutex.RLock()

	argCopy := make([]*DownloaderMockGetMetadataParams, len(mmGetMetadata.callArgs))
	copy(argCopy, mmGetMetadata.callArgs)

	mmGetMetadata.mutex.RUnlock()

	return argCopy
}

// MinimockGetMetadataDone returns true if the count of the GetMetadata invocations corresponds
// the number of defined expectations
func (m *DownloaderMock) MinimockGetMetadataDone() bool {
	for _, e := range m.GetMetadataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMetadataMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMetadataCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMetadata != nil && mm_atomic.LoadUint64(&m.afterGetMetadataCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetMetadataInspect logs each unmet expectation
func (m *DownloaderMock) MinimockGetMetadataInspect() {
	for _, e := range m.GetMetadataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DownloaderMock.GetMetadata with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMetadataMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMetadataCounter) < 1 {
		if m.GetMetadataMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DownloaderMock.GetMetadata")
		} else {
			m.t.Errorf("Expected call to DownloaderMock.GetMetadata with params: %#v", *m.GetMetadataMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMetadata != nil && mm_atomic.LoadUint64(&m.afterGetMetadataCounter) < 1 {
		m.t.Error("Expected call to DownloaderMock.GetMetadata")
	}
}

type mDownloaderMockMatches struct {
	mock               *DownloaderMock
	defaultExpectation *DownloaderMockMatchesExpectation
	expectations       []*DownloaderMockMatchesExpectation

	callArgs []*DownloaderMockMatchesParams
	mutex    sync.RWMutex
}

// DownloaderMockMatchesExpectation specifies expectation struct of the Downloader.Matches
type DownloaderMockMatchesExpectation struct {
	mock    *DownloaderMock
	params  *DownloaderMockMatchesParams
	results *DownloaderMockMatchesResults
	Counter uint64
}

// DownloaderMockMatchesParams contains parameters of the Downloader.Matches
type DownloaderMockMatchesParams struct {
	url string
}

// DownloaderMockMatchesResults contains results of the Downloader.Matches
type DownloaderMockMatchesResults struct {
	b1 bool
}

// Expect sets up expected params for Downloader.Matches
func (mmMatches *mDownloaderMockMatches) Expect(url string) *mDownloaderMockMatches {
	if mmMatches.mock.funcMatches != nil {
		mmMatches.mock.t.Fatalf("DownloaderMock.Matches mock is already set by Set")
	}

	if mmMatches.defaultExpectation == nil {
		mmMatches.defaultExpectation = &DownloaderMockMatchesExpectation{}
	}

	mmMatches.defaultExpectation.params = &DownloaderMockMatchesParams{url}
	for _, e := range mmMatches.expectations {
		if minimock.Equal(e.params, mmMatches.defaultExpectation.params) {
			mmMatches.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMatches.defaultExpectation.params)
		}
	}

	return mmMatches
}

// Inspect accepts an inspector function that has same arguments as the Downloader.Matches
func (mmMatches *mDownloaderMockMatches) Inspect(f func(url string)) *mDownloaderMockMatches {
	if mmMatches.mock.inspectFuncMatches != nil {
		mmMatches.mock.t.Fatalf("Inspect function is already set for DownloaderMock.Matches")
	}

	mmMatches.mock.inspectFuncMatches = f

	return mmMatches
}

// Return sets up results that will be returned by Downloader.Matches
func (mmMatches *mDownloaderMockMatches) Return(b1 bool) *DownloaderMock {
	if mmMatches.mock.funcMatches != nil {
		mmMatches.mock.t.Fatalf("DownloaderMock.Matches mock is already set by Set")
	}

	if mmMatches.defaultExpectation == nil {
		mmMatches.defaultExpectation = &DownloaderMockMatchesExpectation{mock: mmMatches.mock}
	}
	mmMatches.defaultExpectation.results = &DownloaderMockMatchesResults{b1}
	return mmMatches.mock
}

//Set uses given function f to mock the Downloader.Matches method
func (mmMatches *mDownloaderMockMatches) Set(f func(url string) (b1 bool)) *DownloaderMock {
	if mmMatches.defaultExpectation != nil {
		mmMatches.mock.t.Fatalf("Default expectation is already set for the Downloader.Matches method")
	}

	if len(mmMatches.expectations) > 0 {
		mmMatches.mock.t.Fatalf("Some expectations are already set for the Downloader.Matches method")
	}

	mmMatches.mock.funcMatches = f
	return mmMatches.mock
}

// When sets expectation for the Downloader.Matches which will trigger the result defined by the following
// Then helper
func (mmMatches *mDownloaderMockMatches) When(url string) *DownloaderMockMatchesExpectation {
	if mmMatches.mock.funcMatches != nil {
		mmMatches.mock.t.Fatalf("DownloaderMock.Matches mock is already set by Set")
	}

	expectation := &DownloaderMockMatchesExpectation{
		mock:   mmMatches.mock,
		params: &DownloaderMockMatchesParams{url},
	}
	mmMatches.expectations = append(mmMatches.expectations, expectation)
	return expectation
}

// Then sets up Downloader.Matches return parameters for the expectation previously defined by the When method
func (e *DownloaderMockMatchesExpectation) Then(b1 bool) *DownloaderMock {
	e.results = &DownloaderMockMatchesResults{b1}
	return e.mock
}

// Matches implements mediary.Downloader
func (mmMatches *DownloaderMock) Matches(url string) (b1 bool) {
	mm_atomic.AddUint64(&mmMatches.beforeMatchesCounter, 1)
	defer mm_atomic.AddUint64(&mmMatches.afterMatchesCounter, 1)

	if mmMatches.inspectFuncMatches != nil {
		mmMatches.inspectFuncMatches(url)
	}

	mm_params := &DownloaderMockMatchesParams{url}

	// Record call args
	mmMatches.MatchesMock.mutex.Lock()
	mmMatches.MatchesMock.callArgs = append(mmMatches.MatchesMock.callArgs, mm_params)
	mmMatches.MatchesMock.mutex.Unlock()

	for _, e := range mmMatches.MatchesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmMatches.MatchesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMatches.MatchesMock.defaultExpectation.Counter, 1)
		mm_want := mmMatches.MatchesMock.defaultExpectation.params
		mm_got := DownloaderMockMatchesParams{url}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmMatches.t.Errorf("DownloaderMock.Matches got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmMatches.MatchesMock.defaultExpectation.results
		if mm_results == nil {
			mmMatches.t.Fatal("No results are set for the DownloaderMock.Matches")
		}
		return (*mm_results).b1
	}
	if mmMatches.funcMatches != nil {
		return mmMatches.funcMatches(url)
	}
	mmMatches.t.Fatalf("Unexpected call to DownloaderMock.Matches. %v", url)
	return
}

// MatchesAfterCounter returns a count of finished DownloaderMock.Matches invocations
func (mmMatches *DownloaderMock) MatchesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMatches.afterMatchesCounter)
}

// MatchesBeforeCounter returns a count of DownloaderMock.Matches invocations
func (mmMatches *DownloaderMock) MatchesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMatches.beforeMatchesCounter)
}

// Calls returns a list of arguments used in each call to DownloaderMock.Matches.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMatches *mDownloaderMockMatches) Calls() []*DownloaderMockMatchesParams {
	mmMatches.mutex.RLock()

	argCopy := make([]*DownloaderMockMatchesParams, len(mmMatches.callArgs))
	copy(argCopy, mmMatches.callArgs)

	mmMatches.mutex.RUnlock()

	return argCopy
}

// MinimockMatchesDone returns true if the count of the Matches invocations corresponds
// the number of defined expectations
func (m *DownloaderMock) MinimockMatchesDone() bool {
	for _, e := range m.MatchesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MatchesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMatchesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMatches != nil && mm_atomic.LoadUint64(&m.afterMatchesCounter) < 1 {
		return false
	}
	return true
}

// MinimockMatchesInspect logs each unmet expectation
func (m *DownloaderMock) MinimockMatchesInspect() {
	for _, e := range m.MatchesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DownloaderMock.Matches with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MatchesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMatchesCounter) < 1 {
		if m.MatchesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DownloaderMock.Matches")
		} else {
			m.t.Errorf("Expected call to DownloaderMock.Matches with params: %#v", *m.MatchesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMatches != nil && mm_atomic.LoadUint64(&m.afterMatchesCounter) < 1 {
		m.t.Error("Expected call to DownloaderMock.Matches")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DownloaderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetMetadataInspect()

		m.MinimockMatchesInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DownloaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DownloaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetMetadataDone() &&
		m.MinimockMatchesDone()
}
