package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_mediary "github.com/dir01/mediary"
	"github.com/gojuno/minimock/v3"
)

// StorageMock implements mediary.Storage
type StorageMock struct {
	t minimock.Tester

	funcGetMetadata          func(ctx context.Context, url string) (mp1 *mm_mediary.Metadata, err error)
	inspectFuncGetMetadata   func(ctx context.Context, url string)
	afterGetMetadataCounter  uint64
	beforeGetMetadataCounter uint64
	GetMetadataMock          mStorageMockGetMetadata

	funcSaveMetadata          func(ctx context.Context, url string, metadata *mm_mediary.Metadata) (err error)
	inspectFuncSaveMetadata   func(ctx context.Context, url string, metadata *mm_mediary.Metadata)
	afterSaveMetadataCounter  uint64
	beforeSaveMetadataCounter uint64
	SaveMetadataMock          mStorageMockSaveMetadata
}

// NewStorageMock returns a mock for mediary.Storage
func NewStorageMock(t minimock.Tester) *StorageMock {
	m := &StorageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMetadataMock = mStorageMockGetMetadata{mock: m}
	m.GetMetadataMock.callArgs = []*StorageMockGetMetadataParams{}

	m.SaveMetadataMock = mStorageMockSaveMetadata{mock: m}
	m.SaveMetadataMock.callArgs = []*StorageMockSaveMetadataParams{}

	return m
}

type mStorageMockGetMetadata struct {
	mock               *StorageMock
	defaultExpectation *StorageMockGetMetadataExpectation
	expectations       []*StorageMockGetMetadataExpectation

	callArgs []*StorageMockGetMetadataParams
	mutex    sync.RWMutex
}

// StorageMockGetMetadataExpectation specifies expectation struct of the Storage.GetMetadata
type StorageMockGetMetadataExpectation struct {
	mock    *StorageMock
	params  *StorageMockGetMetadataParams
	results *StorageMockGetMetadataResults
	Counter uint64
}

// StorageMockGetMetadataParams contains parameters of the Storage.GetMetadata
type StorageMockGetMetadataParams struct {
	ctx context.Context
	url string
}

// StorageMockGetMetadataResults contains results of the Storage.GetMetadata
type StorageMockGetMetadataResults struct {
	mp1 *mm_mediary.Metadata
	err error
}

// Expect sets up expected params for Storage.GetMetadata
func (mmGetMetadata *mStorageMockGetMetadata) Expect(ctx context.Context, url string) *mStorageMockGetMetadata {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("StorageMock.GetMetadata mock is already set by Set")
	}

	if mmGetMetadata.defaultExpectation == nil {
		mmGetMetadata.defaultExpectation = &StorageMockGetMetadataExpectation{}
	}

	mmGetMetadata.defaultExpectation.params = &StorageMockGetMetadataParams{ctx, url}
	for _, e := range mmGetMetadata.expectations {
		if minimock.Equal(e.params, mmGetMetadata.defaultExpectation.params) {
			mmGetMetadata.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetMetadata.defaultExpectation.params)
		}
	}

	return mmGetMetadata
}

// Inspect accepts an inspector function that has same arguments as the Storage.GetMetadata
func (mmGetMetadata *mStorageMockGetMetadata) Inspect(f func(ctx context.Context, url string)) *mStorageMockGetMetadata {
	if mmGetMetadata.mock.inspectFuncGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("Inspect function is already set for StorageMock.GetMetadata")
	}

	mmGetMetadata.mock.inspectFuncGetMetadata = f

	return mmGetMetadata
}

// Return sets up results that will be returned by Storage.GetMetadata
func (mmGetMetadata *mStorageMockGetMetadata) Return(mp1 *mm_mediary.Metadata, err error) *StorageMock {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("StorageMock.GetMetadata mock is already set by Set")
	}

	if mmGetMetadata.defaultExpectation == nil {
		mmGetMetadata.defaultExpectation = &StorageMockGetMetadataExpectation{mock: mmGetMetadata.mock}
	}
	mmGetMetadata.defaultExpectation.results = &StorageMockGetMetadataResults{mp1, err}
	return mmGetMetadata.mock
}

//Set uses given function f to mock the Storage.GetMetadata method
func (mmGetMetadata *mStorageMockGetMetadata) Set(f func(ctx context.Context, url string) (mp1 *mm_mediary.Metadata, err error)) *StorageMock {
	if mmGetMetadata.defaultExpectation != nil {
		mmGetMetadata.mock.t.Fatalf("Default expectation is already set for the Storage.GetMetadata method")
	}

	if len(mmGetMetadata.expectations) > 0 {
		mmGetMetadata.mock.t.Fatalf("Some expectations are already set for the Storage.GetMetadata method")
	}

	mmGetMetadata.mock.funcGetMetadata = f
	return mmGetMetadata.mock
}

// When sets expectation for the Storage.GetMetadata which will trigger the result defined by the following
// Then helper
func (mmGetMetadata *mStorageMockGetMetadata) When(ctx context.Context, url string) *StorageMockGetMetadataExpectation {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("StorageMock.GetMetadata mock is already set by Set")
	}

	expectation := &StorageMockGetMetadataExpectation{
		mock:   mmGetMetadata.mock,
		params: &StorageMockGetMetadataParams{ctx, url},
	}
	mmGetMetadata.expectations = append(mmGetMetadata.expectations, expectation)
	return expectation
}

// Then sets up Storage.GetMetadata return parameters for the expectation previously defined by the When method
func (e *StorageMockGetMetadataExpectation) Then(mp1 *mm_mediary.Metadata, err error) *StorageMock {
	e.results = &StorageMockGetMetadataResults{mp1, err}
	return e.mock
}

// GetMetadata implements mediary.Storage
func (mmGetMetadata *StorageMock) GetMetadata(ctx context.Context, url string) (mp1 *mm_mediary.Metadata, err error) {
	mm_atomic.AddUint64(&mmGetMetadata.beforeGetMetadataCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMetadata.afterGetMetadataCounter, 1)

	if mmGetMetadata.inspectFuncGetMetadata != nil {
		mmGetMetadata.inspectFuncGetMetadata(ctx, url)
	}

	mm_params := &StorageMockGetMetadataParams{ctx, url}

	// Record call args
	mmGetMetadata.GetMetadataMock.mutex.Lock()
	mmGetMetadata.GetMetadataMock.callArgs = append(mmGetMetadata.GetMetadataMock.callArgs, mm_params)
	mmGetMetadata.GetMetadataMock.mutex.Unlock()

	for _, e := range mmGetMetadata.GetMetadataMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp1, e.results.err
		}
	}

	if mmGetMetadata.GetMetadataMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMetadata.GetMetadataMock.defaultExpectation.Counter, 1)
		mm_want := mmGetMetadata.GetMetadataMock.defaultExpectation.params
		mm_got := StorageMockGetMetadataParams{ctx, url}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetMetadata.t.Errorf("StorageMock.GetMetadata got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetMetadata.GetMetadataMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMetadata.t.Fatal("No results are set for the StorageMock.GetMetadata")
		}
		return (*mm_results).mp1, (*mm_results).err
	}
	if mmGetMetadata.funcGetMetadata != nil {
		return mmGetMetadata.funcGetMetadata(ctx, url)
	}
	mmGetMetadata.t.Fatalf("Unexpected call to StorageMock.GetMetadata. %v %v", ctx, url)
	return
}

// GetMetadataAfterCounter returns a count of finished StorageMock.GetMetadata invocations
func (mmGetMetadata *StorageMock) GetMetadataAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMetadata.afterGetMetadataCounter)
}

// GetMetadataBeforeCounter returns a count of StorageMock.GetMetadata invocations
func (mmGetMetadata *StorageMock) GetMetadataBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMetadata.beforeGetMetadataCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.GetMetadata.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetMetadata *mStorageMockGetMetadata) Calls() []*StorageMockGetMetadataParams {
	mmGetMetadata.mutex.RLock()

	argCopy := make([]*StorageMockGetMetadataParams, len(mmGetMetadata.callArgs))
	copy(argCopy, mmGetMetadata.callArgs)

	mmGetMetadata.mutex.RUnlock()

	return argCopy
}

// MinimockGetMetadataDone returns true if the count of the GetMetadata invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockGetMetadataDone() bool {
	for _, e := range m.GetMetadataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMetadataMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMetadataCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMetadata != nil && mm_atomic.LoadUint64(&m.afterGetMetadataCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetMetadataInspect logs each unmet expectation
func (m *StorageMock) MinimockGetMetadataInspect() {
	for _, e := range m.GetMetadataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.GetMetadata with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMetadataMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMetadataCounter) < 1 {
		if m.GetMetadataMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.GetMetadata")
		} else {
			m.t.Errorf("Expected call to StorageMock.GetMetadata with params: %#v", *m.GetMetadataMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMetadata != nil && mm_atomic.LoadUint64(&m.afterGetMetadataCounter) < 1 {
		m.t.Error("Expected call to StorageMock.GetMetadata")
	}
}

type mStorageMockSaveMetadata struct {
	mock               *StorageMock
	defaultExpectation *StorageMockSaveMetadataExpectation
	expectations       []*StorageMockSaveMetadataExpectation

	callArgs []*StorageMockSaveMetadataParams
	mutex    sync.RWMutex
}

// StorageMockSaveMetadataExpectation specifies expectation struct of the Storage.SaveMetadata
type StorageMockSaveMetadataExpectation struct {
	mock    *StorageMock
	params  *StorageMockSaveMetadataParams
	results *StorageMockSaveMetadataResults
	Counter uint64
}

// StorageMockSaveMetadataParams contains parameters of the Storage.SaveMetadata
type StorageMockSaveMetadataParams struct {
	ctx      context.Context
	url      string
	metadata *mm_mediary.Metadata
}

// StorageMockSaveMetadataResults contains results of the Storage.SaveMetadata
type StorageMockSaveMetadataResults struct {
	err error
}

// Expect sets up expected params for Storage.SaveMetadata
func (mmSaveMetadata *mStorageMockSaveMetadata) Expect(ctx context.Context, url string, metadata *mm_mediary.Metadata) *mStorageMockSaveMetadata {
	if mmSaveMetadata.mock.funcSaveMetadata != nil {
		mmSaveMetadata.mock.t.Fatalf("StorageMock.SaveMetadata mock is already set by Set")
	}

	if mmSaveMetadata.defaultExpectation == nil {
		mmSaveMetadata.defaultExpectation = &StorageMockSaveMetadataExpectation{}
	}

	mmSaveMetadata.defaultExpectation.params = &StorageMockSaveMetadataParams{ctx, url, metadata}
	for _, e := range mmSaveMetadata.expectations {
		if minimock.Equal(e.params, mmSaveMetadata.defaultExpectation.params) {
			mmSaveMetadata.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveMetadata.defaultExpectation.params)
		}
	}

	return mmSaveMetadata
}

// Inspect accepts an inspector function that has same arguments as the Storage.SaveMetadata
func (mmSaveMetadata *mStorageMockSaveMetadata) Inspect(f func(ctx context.Context, url string, metadata *mm_mediary.Metadata)) *mStorageMockSaveMetadata {
	if mmSaveMetadata.mock.inspectFuncSaveMetadata != nil {
		mmSaveMetadata.mock.t.Fatalf("Inspect function is already set for StorageMock.SaveMetadata")
	}

	mmSaveMetadata.mock.inspectFuncSaveMetadata = f

	return mmSaveMetadata
}

// Return sets up results that will be returned by Storage.SaveMetadata
func (mmSaveMetadata *mStorageMockSaveMetadata) Return(err error) *StorageMock {
	if mmSaveMetadata.mock.funcSaveMetadata != nil {
		mmSaveMetadata.mock.t.Fatalf("StorageMock.SaveMetadata mock is already set by Set")
	}

	if mmSaveMetadata.defaultExpectation == nil {
		mmSaveMetadata.defaultExpectation = &StorageMockSaveMetadataExpectation{mock: mmSaveMetadata.mock}
	}
	mmSaveMetadata.defaultExpectation.results = &StorageMockSaveMetadataResults{err}
	return mmSaveMetadata.mock
}

//Set uses given function f to mock the Storage.SaveMetadata method
func (mmSaveMetadata *mStorageMockSaveMetadata) Set(f func(ctx context.Context, url string, metadata *mm_mediary.Metadata) (err error)) *StorageMock {
	if mmSaveMetadata.defaultExpectation != nil {
		mmSaveMetadata.mock.t.Fatalf("Default expectation is already set for the Storage.SaveMetadata method")
	}

	if len(mmSaveMetadata.expectations) > 0 {
		mmSaveMetadata.mock.t.Fatalf("Some expectations are already set for the Storage.SaveMetadata method")
	}

	mmSaveMetadata.mock.funcSaveMetadata = f
	return mmSaveMetadata.mock
}

// When sets expectation for the Storage.SaveMetadata which will trigger the result defined by the following
// Then helper
func (mmSaveMetadata *mStorageMockSaveMetadata) When(ctx context.Context, url string, metadata *mm_mediary.Metadata) *StorageMockSaveMetadataExpectation {
	if mmSaveMetadata.mock.funcSaveMetadata != nil {
		mmSaveMetadata.mock.t.Fatalf("StorageMock.SaveMetadata mock is already set by Set")
	}

	expectation := &StorageMockSaveMetadataExpectation{
		mock:   mmSaveMetadata.mock,
		params: &StorageMockSaveMetadataParams{ctx, url, metadata},
	}
	mmSaveMetadata.expectations = append(mmSaveMetadata.expectations, expectation)
	return expectation
}

// Then sets up Storage.SaveMetadata return parameters for the expectation previously defined by the When method
func (e *StorageMockSaveMetadataExpectation) Then(err error) *StorageMock {
	e.results = &StorageMockSaveMetadataResults{err}
	return e.mock
}

// SaveMetadata implements mediary.Storage
func (mmSaveMetadata *StorageMock) SaveMetadata(ctx context.Context, url string, metadata *mm_mediary.Metadata) (err error) {
	mm_atomic.AddUint64(&mmSaveMetadata.beforeSaveMetadataCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveMetadata.afterSaveMetadataCounter, 1)

	if mmSaveMetadata.inspectFuncSaveMetadata != nil {
		mmSaveMetadata.inspectFuncSaveMetadata(ctx, url, metadata)
	}

	mm_params := &StorageMockSaveMetadataParams{ctx, url, metadata}

	// Record call args
	mmSaveMetadata.SaveMetadataMock.mutex.Lock()
	mmSaveMetadata.SaveMetadataMock.callArgs = append(mmSaveMetadata.SaveMetadataMock.callArgs, mm_params)
	mmSaveMetadata.SaveMetadataMock.mutex.Unlock()

	for _, e := range mmSaveMetadata.SaveMetadataMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSaveMetadata.SaveMetadataMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveMetadata.SaveMetadataMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveMetadata.SaveMetadataMock.defaultExpectation.params
		mm_got := StorageMockSaveMetadataParams{ctx, url, metadata}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveMetadata.t.Errorf("StorageMock.SaveMetadata got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveMetadata.SaveMetadataMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveMetadata.t.Fatal("No results are set for the StorageMock.SaveMetadata")
		}
		return (*mm_results).err
	}
	if mmSaveMetadata.funcSaveMetadata != nil {
		return mmSaveMetadata.funcSaveMetadata(ctx, url, metadata)
	}
	mmSaveMetadata.t.Fatalf("Unexpected call to StorageMock.SaveMetadata. %v %v %v", ctx, url, metadata)
	return
}

// SaveMetadataAfterCounter returns a count of finished StorageMock.SaveMetadata invocations
func (mmSaveMetadata *StorageMock) SaveMetadataAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveMetadata.afterSaveMetadataCounter)
}

// SaveMetadataBeforeCounter returns a count of StorageMock.SaveMetadata invocations
func (mmSaveMetadata *StorageMock) SaveMetadataBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveMetadata.beforeSaveMetadataCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.SaveMetadata.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveMetadata *mStorageMockSaveMetadata) Calls() []*StorageMockSaveMetadataParams {
	mmSaveMetadata.mutex.RLock()

	argCopy := make([]*StorageMockSaveMetadataParams, len(mmSaveMetadata.callArgs))
	copy(argCopy, mmSaveMetadata.callArgs)

	mmSaveMetadata.mutex.RUnlock()

	return argCopy
}

// MinimockSaveMetadataDone returns true if the count of the SaveMetadata invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockSaveMetadataDone() bool {
	for _, e := range m.SaveMetadataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMetadataMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveMetadataCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveMetadata != nil && mm_atomic.LoadUint64(&m.afterSaveMetadataCounter) < 1 {
		return false
	}
	return true
}

// MinimockSaveMetadataInspect logs each unmet expectation
func (m *StorageMock) MinimockSaveMetadataInspect() {
	for _, e := range m.SaveMetadataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.SaveMetadata with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMetadataMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveMetadataCounter) < 1 {
		if m.SaveMetadataMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.SaveMetadata")
		} else {
			m.t.Errorf("Expected call to StorageMock.SaveMetadata with params: %#v", *m.SaveMetadataMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveMetadata != nil && mm_atomic.LoadUint64(&m.afterSaveMetadataCounter) < 1 {
		m.t.Error("Expected call to StorageMock.SaveMetadata")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StorageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetMetadataInspect()

		m.MinimockSaveMetadataInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetMetadataDone() &&
		m.MinimockSaveMetadataDone()
}
