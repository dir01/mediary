package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// MediaProcessorMock implements service.MediaProcessor
type MediaProcessorMock struct {
	t minimock.Tester

	funcConcatenate          func(ctx context.Context, filepaths []string, audioCodec string) (resultFilepath string, err error)
	inspectFuncConcatenate   func(ctx context.Context, filepaths []string, audioCodec string)
	afterConcatenateCounter  uint64
	beforeConcatenateCounter uint64
	ConcatenateMock          mMediaProcessorMockConcatenate
}

// NewMediaProcessorMock returns a mock for service.MediaProcessor
func NewMediaProcessorMock(t minimock.Tester) *MediaProcessorMock {
	m := &MediaProcessorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ConcatenateMock = mMediaProcessorMockConcatenate{mock: m}
	m.ConcatenateMock.callArgs = []*MediaProcessorMockConcatenateParams{}

	return m
}

type mMediaProcessorMockConcatenate struct {
	mock               *MediaProcessorMock
	defaultExpectation *MediaProcessorMockConcatenateExpectation
	expectations       []*MediaProcessorMockConcatenateExpectation

	callArgs []*MediaProcessorMockConcatenateParams
	mutex    sync.RWMutex
}

// MediaProcessorMockConcatenateExpectation specifies expectation struct of the MediaProcessor.Concatenate
type MediaProcessorMockConcatenateExpectation struct {
	mock    *MediaProcessorMock
	params  *MediaProcessorMockConcatenateParams
	results *MediaProcessorMockConcatenateResults
	Counter uint64
}

// MediaProcessorMockConcatenateParams contains parameters of the MediaProcessor.Concatenate
type MediaProcessorMockConcatenateParams struct {
	ctx        context.Context
	filepaths  []string
	audioCodec string
}

// MediaProcessorMockConcatenateResults contains results of the MediaProcessor.Concatenate
type MediaProcessorMockConcatenateResults struct {
	resultFilepath string
	err            error
}

// Expect sets up expected params for MediaProcessor.Concatenate
func (mmConcatenate *mMediaProcessorMockConcatenate) Expect(ctx context.Context, filepaths []string, audioCodec string) *mMediaProcessorMockConcatenate {
	if mmConcatenate.mock.funcConcatenate != nil {
		mmConcatenate.mock.t.Fatalf("MediaProcessorMock.Concatenate mock is already set by Set")
	}

	if mmConcatenate.defaultExpectation == nil {
		mmConcatenate.defaultExpectation = &MediaProcessorMockConcatenateExpectation{}
	}

	mmConcatenate.defaultExpectation.params = &MediaProcessorMockConcatenateParams{ctx, filepaths, audioCodec}
	for _, e := range mmConcatenate.expectations {
		if minimock.Equal(e.params, mmConcatenate.defaultExpectation.params) {
			mmConcatenate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConcatenate.defaultExpectation.params)
		}
	}

	return mmConcatenate
}

// Inspect accepts an inspector function that has same arguments as the MediaProcessor.Concatenate
func (mmConcatenate *mMediaProcessorMockConcatenate) Inspect(f func(ctx context.Context, filepaths []string, audioCodec string)) *mMediaProcessorMockConcatenate {
	if mmConcatenate.mock.inspectFuncConcatenate != nil {
		mmConcatenate.mock.t.Fatalf("Inspect function is already set for MediaProcessorMock.Concatenate")
	}

	mmConcatenate.mock.inspectFuncConcatenate = f

	return mmConcatenate
}

// Return sets up results that will be returned by MediaProcessor.Concatenate
func (mmConcatenate *mMediaProcessorMockConcatenate) Return(resultFilepath string, err error) *MediaProcessorMock {
	if mmConcatenate.mock.funcConcatenate != nil {
		mmConcatenate.mock.t.Fatalf("MediaProcessorMock.Concatenate mock is already set by Set")
	}

	if mmConcatenate.defaultExpectation == nil {
		mmConcatenate.defaultExpectation = &MediaProcessorMockConcatenateExpectation{mock: mmConcatenate.mock}
	}
	mmConcatenate.defaultExpectation.results = &MediaProcessorMockConcatenateResults{resultFilepath, err}
	return mmConcatenate.mock
}

//Set uses given function f to mock the MediaProcessor.Concatenate method
func (mmConcatenate *mMediaProcessorMockConcatenate) Set(f func(ctx context.Context, filepaths []string, audioCodec string) (resultFilepath string, err error)) *MediaProcessorMock {
	if mmConcatenate.defaultExpectation != nil {
		mmConcatenate.mock.t.Fatalf("Default expectation is already set for the MediaProcessor.Concatenate method")
	}

	if len(mmConcatenate.expectations) > 0 {
		mmConcatenate.mock.t.Fatalf("Some expectations are already set for the MediaProcessor.Concatenate method")
	}

	mmConcatenate.mock.funcConcatenate = f
	return mmConcatenate.mock
}

// When sets expectation for the MediaProcessor.Concatenate which will trigger the result defined by the following
// Then helper
func (mmConcatenate *mMediaProcessorMockConcatenate) When(ctx context.Context, filepaths []string, audioCodec string) *MediaProcessorMockConcatenateExpectation {
	if mmConcatenate.mock.funcConcatenate != nil {
		mmConcatenate.mock.t.Fatalf("MediaProcessorMock.Concatenate mock is already set by Set")
	}

	expectation := &MediaProcessorMockConcatenateExpectation{
		mock:   mmConcatenate.mock,
		params: &MediaProcessorMockConcatenateParams{ctx, filepaths, audioCodec},
	}
	mmConcatenate.expectations = append(mmConcatenate.expectations, expectation)
	return expectation
}

// Then sets up MediaProcessor.Concatenate return parameters for the expectation previously defined by the When method
func (e *MediaProcessorMockConcatenateExpectation) Then(resultFilepath string, err error) *MediaProcessorMock {
	e.results = &MediaProcessorMockConcatenateResults{resultFilepath, err}
	return e.mock
}

// Concatenate implements service.MediaProcessor
func (mmConcatenate *MediaProcessorMock) Concatenate(ctx context.Context, filepaths []string, audioCodec string) (resultFilepath string, err error) {
	mm_atomic.AddUint64(&mmConcatenate.beforeConcatenateCounter, 1)
	defer mm_atomic.AddUint64(&mmConcatenate.afterConcatenateCounter, 1)

	if mmConcatenate.inspectFuncConcatenate != nil {
		mmConcatenate.inspectFuncConcatenate(ctx, filepaths, audioCodec)
	}

	mm_params := &MediaProcessorMockConcatenateParams{ctx, filepaths, audioCodec}

	// Record call args
	mmConcatenate.ConcatenateMock.mutex.Lock()
	mmConcatenate.ConcatenateMock.callArgs = append(mmConcatenate.ConcatenateMock.callArgs, mm_params)
	mmConcatenate.ConcatenateMock.mutex.Unlock()

	for _, e := range mmConcatenate.ConcatenateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.resultFilepath, e.results.err
		}
	}

	if mmConcatenate.ConcatenateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConcatenate.ConcatenateMock.defaultExpectation.Counter, 1)
		mm_want := mmConcatenate.ConcatenateMock.defaultExpectation.params
		mm_got := MediaProcessorMockConcatenateParams{ctx, filepaths, audioCodec}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConcatenate.t.Errorf("MediaProcessorMock.Concatenate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConcatenate.ConcatenateMock.defaultExpectation.results
		if mm_results == nil {
			mmConcatenate.t.Fatal("No results are set for the MediaProcessorMock.Concatenate")
		}
		return (*mm_results).resultFilepath, (*mm_results).err
	}
	if mmConcatenate.funcConcatenate != nil {
		return mmConcatenate.funcConcatenate(ctx, filepaths, audioCodec)
	}
	mmConcatenate.t.Fatalf("Unexpected call to MediaProcessorMock.Concatenate. %v %v %v", ctx, filepaths, audioCodec)
	return
}

// ConcatenateAfterCounter returns a count of finished MediaProcessorMock.Concatenate invocations
func (mmConcatenate *MediaProcessorMock) ConcatenateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConcatenate.afterConcatenateCounter)
}

// ConcatenateBeforeCounter returns a count of MediaProcessorMock.Concatenate invocations
func (mmConcatenate *MediaProcessorMock) ConcatenateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConcatenate.beforeConcatenateCounter)
}

// Calls returns a list of arguments used in each call to MediaProcessorMock.Concatenate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConcatenate *mMediaProcessorMockConcatenate) Calls() []*MediaProcessorMockConcatenateParams {
	mmConcatenate.mutex.RLock()

	argCopy := make([]*MediaProcessorMockConcatenateParams, len(mmConcatenate.callArgs))
	copy(argCopy, mmConcatenate.callArgs)

	mmConcatenate.mutex.RUnlock()

	return argCopy
}

// MinimockConcatenateDone returns true if the count of the Concatenate invocations corresponds
// the number of defined expectations
func (m *MediaProcessorMock) MinimockConcatenateDone() bool {
	for _, e := range m.ConcatenateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConcatenateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConcatenateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConcatenate != nil && mm_atomic.LoadUint64(&m.afterConcatenateCounter) < 1 {
		return false
	}
	return true
}

// MinimockConcatenateInspect logs each unmet expectation
func (m *MediaProcessorMock) MinimockConcatenateInspect() {
	for _, e := range m.ConcatenateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MediaProcessorMock.Concatenate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConcatenateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConcatenateCounter) < 1 {
		if m.ConcatenateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MediaProcessorMock.Concatenate")
		} else {
			m.t.Errorf("Expected call to MediaProcessorMock.Concatenate with params: %#v", *m.ConcatenateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConcatenate != nil && mm_atomic.LoadUint64(&m.afterConcatenateCounter) < 1 {
		m.t.Error("Expected call to MediaProcessorMock.Concatenate")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MediaProcessorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockConcatenateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MediaProcessorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MediaProcessorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockConcatenateDone()
}
