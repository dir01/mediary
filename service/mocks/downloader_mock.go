// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_service "github.com/dir01/mediary/service"
	"github.com/gojuno/minimock/v3"
)

// DownloaderMock implements mm_service.Downloader
type DownloaderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAcceptsURL          func(url string) (b1 bool)
	funcAcceptsURLOrigin    string
	inspectFuncAcceptsURL   func(url string)
	afterAcceptsURLCounter  uint64
	beforeAcceptsURLCounter uint64
	AcceptsURLMock          mDownloaderMockAcceptsURL

	funcDownload          func(ctx context.Context, url string, filepaths []string) (filepathsMap map[string]string, err error)
	funcDownloadOrigin    string
	inspectFuncDownload   func(ctx context.Context, url string, filepaths []string)
	afterDownloadCounter  uint64
	beforeDownloadCounter uint64
	DownloadMock          mDownloaderMockDownload

	funcGetMetadata          func(ctx context.Context, url string) (mp1 *mm_service.Metadata, err error)
	funcGetMetadataOrigin    string
	inspectFuncGetMetadata   func(ctx context.Context, url string)
	afterGetMetadataCounter  uint64
	beforeGetMetadataCounter uint64
	GetMetadataMock          mDownloaderMockGetMetadata
}

// NewDownloaderMock returns a mock for mm_service.Downloader
func NewDownloaderMock(t minimock.Tester) *DownloaderMock {
	m := &DownloaderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AcceptsURLMock = mDownloaderMockAcceptsURL{mock: m}
	m.AcceptsURLMock.callArgs = []*DownloaderMockAcceptsURLParams{}

	m.DownloadMock = mDownloaderMockDownload{mock: m}
	m.DownloadMock.callArgs = []*DownloaderMockDownloadParams{}

	m.GetMetadataMock = mDownloaderMockGetMetadata{mock: m}
	m.GetMetadataMock.callArgs = []*DownloaderMockGetMetadataParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mDownloaderMockAcceptsURL struct {
	optional           bool
	mock               *DownloaderMock
	defaultExpectation *DownloaderMockAcceptsURLExpectation
	expectations       []*DownloaderMockAcceptsURLExpectation

	callArgs []*DownloaderMockAcceptsURLParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// DownloaderMockAcceptsURLExpectation specifies expectation struct of the Downloader.AcceptsURL
type DownloaderMockAcceptsURLExpectation struct {
	mock               *DownloaderMock
	params             *DownloaderMockAcceptsURLParams
	paramPtrs          *DownloaderMockAcceptsURLParamPtrs
	expectationOrigins DownloaderMockAcceptsURLExpectationOrigins
	results            *DownloaderMockAcceptsURLResults
	returnOrigin       string
	Counter            uint64
}

// DownloaderMockAcceptsURLParams contains parameters of the Downloader.AcceptsURL
type DownloaderMockAcceptsURLParams struct {
	url string
}

// DownloaderMockAcceptsURLParamPtrs contains pointers to parameters of the Downloader.AcceptsURL
type DownloaderMockAcceptsURLParamPtrs struct {
	url *string
}

// DownloaderMockAcceptsURLResults contains results of the Downloader.AcceptsURL
type DownloaderMockAcceptsURLResults struct {
	b1 bool
}

// DownloaderMockAcceptsURLOrigins contains origins of expectations of the Downloader.AcceptsURL
type DownloaderMockAcceptsURLExpectationOrigins struct {
	origin    string
	originUrl string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAcceptsURL *mDownloaderMockAcceptsURL) Optional() *mDownloaderMockAcceptsURL {
	mmAcceptsURL.optional = true
	return mmAcceptsURL
}

// Expect sets up expected params for Downloader.AcceptsURL
func (mmAcceptsURL *mDownloaderMockAcceptsURL) Expect(url string) *mDownloaderMockAcceptsURL {
	if mmAcceptsURL.mock.funcAcceptsURL != nil {
		mmAcceptsURL.mock.t.Fatalf("DownloaderMock.AcceptsURL mock is already set by Set")
	}

	if mmAcceptsURL.defaultExpectation == nil {
		mmAcceptsURL.defaultExpectation = &DownloaderMockAcceptsURLExpectation{}
	}

	if mmAcceptsURL.defaultExpectation.paramPtrs != nil {
		mmAcceptsURL.mock.t.Fatalf("DownloaderMock.AcceptsURL mock is already set by ExpectParams functions")
	}

	mmAcceptsURL.defaultExpectation.params = &DownloaderMockAcceptsURLParams{url}
	mmAcceptsURL.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAcceptsURL.expectations {
		if minimock.Equal(e.params, mmAcceptsURL.defaultExpectation.params) {
			mmAcceptsURL.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAcceptsURL.defaultExpectation.params)
		}
	}

	return mmAcceptsURL
}

// ExpectUrlParam1 sets up expected param url for Downloader.AcceptsURL
func (mmAcceptsURL *mDownloaderMockAcceptsURL) ExpectUrlParam1(url string) *mDownloaderMockAcceptsURL {
	if mmAcceptsURL.mock.funcAcceptsURL != nil {
		mmAcceptsURL.mock.t.Fatalf("DownloaderMock.AcceptsURL mock is already set by Set")
	}

	if mmAcceptsURL.defaultExpectation == nil {
		mmAcceptsURL.defaultExpectation = &DownloaderMockAcceptsURLExpectation{}
	}

	if mmAcceptsURL.defaultExpectation.params != nil {
		mmAcceptsURL.mock.t.Fatalf("DownloaderMock.AcceptsURL mock is already set by Expect")
	}

	if mmAcceptsURL.defaultExpectation.paramPtrs == nil {
		mmAcceptsURL.defaultExpectation.paramPtrs = &DownloaderMockAcceptsURLParamPtrs{}
	}
	mmAcceptsURL.defaultExpectation.paramPtrs.url = &url
	mmAcceptsURL.defaultExpectation.expectationOrigins.originUrl = minimock.CallerInfo(1)

	return mmAcceptsURL
}

// Inspect accepts an inspector function that has same arguments as the Downloader.AcceptsURL
func (mmAcceptsURL *mDownloaderMockAcceptsURL) Inspect(f func(url string)) *mDownloaderMockAcceptsURL {
	if mmAcceptsURL.mock.inspectFuncAcceptsURL != nil {
		mmAcceptsURL.mock.t.Fatalf("Inspect function is already set for DownloaderMock.AcceptsURL")
	}

	mmAcceptsURL.mock.inspectFuncAcceptsURL = f

	return mmAcceptsURL
}

// Return sets up results that will be returned by Downloader.AcceptsURL
func (mmAcceptsURL *mDownloaderMockAcceptsURL) Return(b1 bool) *DownloaderMock {
	if mmAcceptsURL.mock.funcAcceptsURL != nil {
		mmAcceptsURL.mock.t.Fatalf("DownloaderMock.AcceptsURL mock is already set by Set")
	}

	if mmAcceptsURL.defaultExpectation == nil {
		mmAcceptsURL.defaultExpectation = &DownloaderMockAcceptsURLExpectation{mock: mmAcceptsURL.mock}
	}
	mmAcceptsURL.defaultExpectation.results = &DownloaderMockAcceptsURLResults{b1}
	mmAcceptsURL.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAcceptsURL.mock
}

// Set uses given function f to mock the Downloader.AcceptsURL method
func (mmAcceptsURL *mDownloaderMockAcceptsURL) Set(f func(url string) (b1 bool)) *DownloaderMock {
	if mmAcceptsURL.defaultExpectation != nil {
		mmAcceptsURL.mock.t.Fatalf("Default expectation is already set for the Downloader.AcceptsURL method")
	}

	if len(mmAcceptsURL.expectations) > 0 {
		mmAcceptsURL.mock.t.Fatalf("Some expectations are already set for the Downloader.AcceptsURL method")
	}

	mmAcceptsURL.mock.funcAcceptsURL = f
	mmAcceptsURL.mock.funcAcceptsURLOrigin = minimock.CallerInfo(1)
	return mmAcceptsURL.mock
}

// When sets expectation for the Downloader.AcceptsURL which will trigger the result defined by the following
// Then helper
func (mmAcceptsURL *mDownloaderMockAcceptsURL) When(url string) *DownloaderMockAcceptsURLExpectation {
	if mmAcceptsURL.mock.funcAcceptsURL != nil {
		mmAcceptsURL.mock.t.Fatalf("DownloaderMock.AcceptsURL mock is already set by Set")
	}

	expectation := &DownloaderMockAcceptsURLExpectation{
		mock:               mmAcceptsURL.mock,
		params:             &DownloaderMockAcceptsURLParams{url},
		expectationOrigins: DownloaderMockAcceptsURLExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAcceptsURL.expectations = append(mmAcceptsURL.expectations, expectation)
	return expectation
}

// Then sets up Downloader.AcceptsURL return parameters for the expectation previously defined by the When method
func (e *DownloaderMockAcceptsURLExpectation) Then(b1 bool) *DownloaderMock {
	e.results = &DownloaderMockAcceptsURLResults{b1}
	return e.mock
}

// Times sets number of times Downloader.AcceptsURL should be invoked
func (mmAcceptsURL *mDownloaderMockAcceptsURL) Times(n uint64) *mDownloaderMockAcceptsURL {
	if n == 0 {
		mmAcceptsURL.mock.t.Fatalf("Times of DownloaderMock.AcceptsURL mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAcceptsURL.expectedInvocations, n)
	mmAcceptsURL.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAcceptsURL
}

func (mmAcceptsURL *mDownloaderMockAcceptsURL) invocationsDone() bool {
	if len(mmAcceptsURL.expectations) == 0 && mmAcceptsURL.defaultExpectation == nil && mmAcceptsURL.mock.funcAcceptsURL == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAcceptsURL.mock.afterAcceptsURLCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAcceptsURL.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AcceptsURL implements mm_service.Downloader
func (mmAcceptsURL *DownloaderMock) AcceptsURL(url string) (b1 bool) {
	mm_atomic.AddUint64(&mmAcceptsURL.beforeAcceptsURLCounter, 1)
	defer mm_atomic.AddUint64(&mmAcceptsURL.afterAcceptsURLCounter, 1)

	mmAcceptsURL.t.Helper()

	if mmAcceptsURL.inspectFuncAcceptsURL != nil {
		mmAcceptsURL.inspectFuncAcceptsURL(url)
	}

	mm_params := DownloaderMockAcceptsURLParams{url}

	// Record call args
	mmAcceptsURL.AcceptsURLMock.mutex.Lock()
	mmAcceptsURL.AcceptsURLMock.callArgs = append(mmAcceptsURL.AcceptsURLMock.callArgs, &mm_params)
	mmAcceptsURL.AcceptsURLMock.mutex.Unlock()

	for _, e := range mmAcceptsURL.AcceptsURLMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmAcceptsURL.AcceptsURLMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAcceptsURL.AcceptsURLMock.defaultExpectation.Counter, 1)
		mm_want := mmAcceptsURL.AcceptsURLMock.defaultExpectation.params
		mm_want_ptrs := mmAcceptsURL.AcceptsURLMock.defaultExpectation.paramPtrs

		mm_got := DownloaderMockAcceptsURLParams{url}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.url != nil && !minimock.Equal(*mm_want_ptrs.url, mm_got.url) {
				mmAcceptsURL.t.Errorf("DownloaderMock.AcceptsURL got unexpected parameter url, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAcceptsURL.AcceptsURLMock.defaultExpectation.expectationOrigins.originUrl, *mm_want_ptrs.url, mm_got.url, minimock.Diff(*mm_want_ptrs.url, mm_got.url))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAcceptsURL.t.Errorf("DownloaderMock.AcceptsURL got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAcceptsURL.AcceptsURLMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAcceptsURL.AcceptsURLMock.defaultExpectation.results
		if mm_results == nil {
			mmAcceptsURL.t.Fatal("No results are set for the DownloaderMock.AcceptsURL")
		}
		return (*mm_results).b1
	}
	if mmAcceptsURL.funcAcceptsURL != nil {
		return mmAcceptsURL.funcAcceptsURL(url)
	}
	mmAcceptsURL.t.Fatalf("Unexpected call to DownloaderMock.AcceptsURL. %v", url)
	return
}

// AcceptsURLAfterCounter returns a count of finished DownloaderMock.AcceptsURL invocations
func (mmAcceptsURL *DownloaderMock) AcceptsURLAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcceptsURL.afterAcceptsURLCounter)
}

// AcceptsURLBeforeCounter returns a count of DownloaderMock.AcceptsURL invocations
func (mmAcceptsURL *DownloaderMock) AcceptsURLBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcceptsURL.beforeAcceptsURLCounter)
}

// Calls returns a list of arguments used in each call to DownloaderMock.AcceptsURL.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAcceptsURL *mDownloaderMockAcceptsURL) Calls() []*DownloaderMockAcceptsURLParams {
	mmAcceptsURL.mutex.RLock()

	argCopy := make([]*DownloaderMockAcceptsURLParams, len(mmAcceptsURL.callArgs))
	copy(argCopy, mmAcceptsURL.callArgs)

	mmAcceptsURL.mutex.RUnlock()

	return argCopy
}

// MinimockAcceptsURLDone returns true if the count of the AcceptsURL invocations corresponds
// the number of defined expectations
func (m *DownloaderMock) MinimockAcceptsURLDone() bool {
	if m.AcceptsURLMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AcceptsURLMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AcceptsURLMock.invocationsDone()
}

// MinimockAcceptsURLInspect logs each unmet expectation
func (m *DownloaderMock) MinimockAcceptsURLInspect() {
	for _, e := range m.AcceptsURLMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DownloaderMock.AcceptsURL at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAcceptsURLCounter := mm_atomic.LoadUint64(&m.afterAcceptsURLCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AcceptsURLMock.defaultExpectation != nil && afterAcceptsURLCounter < 1 {
		if m.AcceptsURLMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to DownloaderMock.AcceptsURL at\n%s", m.AcceptsURLMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to DownloaderMock.AcceptsURL at\n%s with params: %#v", m.AcceptsURLMock.defaultExpectation.expectationOrigins.origin, *m.AcceptsURLMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAcceptsURL != nil && afterAcceptsURLCounter < 1 {
		m.t.Errorf("Expected call to DownloaderMock.AcceptsURL at\n%s", m.funcAcceptsURLOrigin)
	}

	if !m.AcceptsURLMock.invocationsDone() && afterAcceptsURLCounter > 0 {
		m.t.Errorf("Expected %d calls to DownloaderMock.AcceptsURL at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AcceptsURLMock.expectedInvocations), m.AcceptsURLMock.expectedInvocationsOrigin, afterAcceptsURLCounter)
	}
}

type mDownloaderMockDownload struct {
	optional           bool
	mock               *DownloaderMock
	defaultExpectation *DownloaderMockDownloadExpectation
	expectations       []*DownloaderMockDownloadExpectation

	callArgs []*DownloaderMockDownloadParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// DownloaderMockDownloadExpectation specifies expectation struct of the Downloader.Download
type DownloaderMockDownloadExpectation struct {
	mock               *DownloaderMock
	params             *DownloaderMockDownloadParams
	paramPtrs          *DownloaderMockDownloadParamPtrs
	expectationOrigins DownloaderMockDownloadExpectationOrigins
	results            *DownloaderMockDownloadResults
	returnOrigin       string
	Counter            uint64
}

// DownloaderMockDownloadParams contains parameters of the Downloader.Download
type DownloaderMockDownloadParams struct {
	ctx       context.Context
	url       string
	filepaths []string
}

// DownloaderMockDownloadParamPtrs contains pointers to parameters of the Downloader.Download
type DownloaderMockDownloadParamPtrs struct {
	ctx       *context.Context
	url       *string
	filepaths *[]string
}

// DownloaderMockDownloadResults contains results of the Downloader.Download
type DownloaderMockDownloadResults struct {
	filepathsMap map[string]string
	err          error
}

// DownloaderMockDownloadOrigins contains origins of expectations of the Downloader.Download
type DownloaderMockDownloadExpectationOrigins struct {
	origin          string
	originCtx       string
	originUrl       string
	originFilepaths string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDownload *mDownloaderMockDownload) Optional() *mDownloaderMockDownload {
	mmDownload.optional = true
	return mmDownload
}

// Expect sets up expected params for Downloader.Download
func (mmDownload *mDownloaderMockDownload) Expect(ctx context.Context, url string, filepaths []string) *mDownloaderMockDownload {
	if mmDownload.mock.funcDownload != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by Set")
	}

	if mmDownload.defaultExpectation == nil {
		mmDownload.defaultExpectation = &DownloaderMockDownloadExpectation{}
	}

	if mmDownload.defaultExpectation.paramPtrs != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by ExpectParams functions")
	}

	mmDownload.defaultExpectation.params = &DownloaderMockDownloadParams{ctx, url, filepaths}
	mmDownload.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDownload.expectations {
		if minimock.Equal(e.params, mmDownload.defaultExpectation.params) {
			mmDownload.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDownload.defaultExpectation.params)
		}
	}

	return mmDownload
}

// ExpectCtxParam1 sets up expected param ctx for Downloader.Download
func (mmDownload *mDownloaderMockDownload) ExpectCtxParam1(ctx context.Context) *mDownloaderMockDownload {
	if mmDownload.mock.funcDownload != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by Set")
	}

	if mmDownload.defaultExpectation == nil {
		mmDownload.defaultExpectation = &DownloaderMockDownloadExpectation{}
	}

	if mmDownload.defaultExpectation.params != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by Expect")
	}

	if mmDownload.defaultExpectation.paramPtrs == nil {
		mmDownload.defaultExpectation.paramPtrs = &DownloaderMockDownloadParamPtrs{}
	}
	mmDownload.defaultExpectation.paramPtrs.ctx = &ctx
	mmDownload.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDownload
}

// ExpectUrlParam2 sets up expected param url for Downloader.Download
func (mmDownload *mDownloaderMockDownload) ExpectUrlParam2(url string) *mDownloaderMockDownload {
	if mmDownload.mock.funcDownload != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by Set")
	}

	if mmDownload.defaultExpectation == nil {
		mmDownload.defaultExpectation = &DownloaderMockDownloadExpectation{}
	}

	if mmDownload.defaultExpectation.params != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by Expect")
	}

	if mmDownload.defaultExpectation.paramPtrs == nil {
		mmDownload.defaultExpectation.paramPtrs = &DownloaderMockDownloadParamPtrs{}
	}
	mmDownload.defaultExpectation.paramPtrs.url = &url
	mmDownload.defaultExpectation.expectationOrigins.originUrl = minimock.CallerInfo(1)

	return mmDownload
}

// ExpectFilepathsParam3 sets up expected param filepaths for Downloader.Download
func (mmDownload *mDownloaderMockDownload) ExpectFilepathsParam3(filepaths []string) *mDownloaderMockDownload {
	if mmDownload.mock.funcDownload != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by Set")
	}

	if mmDownload.defaultExpectation == nil {
		mmDownload.defaultExpectation = &DownloaderMockDownloadExpectation{}
	}

	if mmDownload.defaultExpectation.params != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by Expect")
	}

	if mmDownload.defaultExpectation.paramPtrs == nil {
		mmDownload.defaultExpectation.paramPtrs = &DownloaderMockDownloadParamPtrs{}
	}
	mmDownload.defaultExpectation.paramPtrs.filepaths = &filepaths
	mmDownload.defaultExpectation.expectationOrigins.originFilepaths = minimock.CallerInfo(1)

	return mmDownload
}

// Inspect accepts an inspector function that has same arguments as the Downloader.Download
func (mmDownload *mDownloaderMockDownload) Inspect(f func(ctx context.Context, url string, filepaths []string)) *mDownloaderMockDownload {
	if mmDownload.mock.inspectFuncDownload != nil {
		mmDownload.mock.t.Fatalf("Inspect function is already set for DownloaderMock.Download")
	}

	mmDownload.mock.inspectFuncDownload = f

	return mmDownload
}

// Return sets up results that will be returned by Downloader.Download
func (mmDownload *mDownloaderMockDownload) Return(filepathsMap map[string]string, err error) *DownloaderMock {
	if mmDownload.mock.funcDownload != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by Set")
	}

	if mmDownload.defaultExpectation == nil {
		mmDownload.defaultExpectation = &DownloaderMockDownloadExpectation{mock: mmDownload.mock}
	}
	mmDownload.defaultExpectation.results = &DownloaderMockDownloadResults{filepathsMap, err}
	mmDownload.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDownload.mock
}

// Set uses given function f to mock the Downloader.Download method
func (mmDownload *mDownloaderMockDownload) Set(f func(ctx context.Context, url string, filepaths []string) (filepathsMap map[string]string, err error)) *DownloaderMock {
	if mmDownload.defaultExpectation != nil {
		mmDownload.mock.t.Fatalf("Default expectation is already set for the Downloader.Download method")
	}

	if len(mmDownload.expectations) > 0 {
		mmDownload.mock.t.Fatalf("Some expectations are already set for the Downloader.Download method")
	}

	mmDownload.mock.funcDownload = f
	mmDownload.mock.funcDownloadOrigin = minimock.CallerInfo(1)
	return mmDownload.mock
}

// When sets expectation for the Downloader.Download which will trigger the result defined by the following
// Then helper
func (mmDownload *mDownloaderMockDownload) When(ctx context.Context, url string, filepaths []string) *DownloaderMockDownloadExpectation {
	if mmDownload.mock.funcDownload != nil {
		mmDownload.mock.t.Fatalf("DownloaderMock.Download mock is already set by Set")
	}

	expectation := &DownloaderMockDownloadExpectation{
		mock:               mmDownload.mock,
		params:             &DownloaderMockDownloadParams{ctx, url, filepaths},
		expectationOrigins: DownloaderMockDownloadExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDownload.expectations = append(mmDownload.expectations, expectation)
	return expectation
}

// Then sets up Downloader.Download return parameters for the expectation previously defined by the When method
func (e *DownloaderMockDownloadExpectation) Then(filepathsMap map[string]string, err error) *DownloaderMock {
	e.results = &DownloaderMockDownloadResults{filepathsMap, err}
	return e.mock
}

// Times sets number of times Downloader.Download should be invoked
func (mmDownload *mDownloaderMockDownload) Times(n uint64) *mDownloaderMockDownload {
	if n == 0 {
		mmDownload.mock.t.Fatalf("Times of DownloaderMock.Download mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDownload.expectedInvocations, n)
	mmDownload.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDownload
}

func (mmDownload *mDownloaderMockDownload) invocationsDone() bool {
	if len(mmDownload.expectations) == 0 && mmDownload.defaultExpectation == nil && mmDownload.mock.funcDownload == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDownload.mock.afterDownloadCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDownload.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Download implements mm_service.Downloader
func (mmDownload *DownloaderMock) Download(ctx context.Context, url string, filepaths []string) (filepathsMap map[string]string, err error) {
	mm_atomic.AddUint64(&mmDownload.beforeDownloadCounter, 1)
	defer mm_atomic.AddUint64(&mmDownload.afterDownloadCounter, 1)

	mmDownload.t.Helper()

	if mmDownload.inspectFuncDownload != nil {
		mmDownload.inspectFuncDownload(ctx, url, filepaths)
	}

	mm_params := DownloaderMockDownloadParams{ctx, url, filepaths}

	// Record call args
	mmDownload.DownloadMock.mutex.Lock()
	mmDownload.DownloadMock.callArgs = append(mmDownload.DownloadMock.callArgs, &mm_params)
	mmDownload.DownloadMock.mutex.Unlock()

	for _, e := range mmDownload.DownloadMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.filepathsMap, e.results.err
		}
	}

	if mmDownload.DownloadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDownload.DownloadMock.defaultExpectation.Counter, 1)
		mm_want := mmDownload.DownloadMock.defaultExpectation.params
		mm_want_ptrs := mmDownload.DownloadMock.defaultExpectation.paramPtrs

		mm_got := DownloaderMockDownloadParams{ctx, url, filepaths}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDownload.t.Errorf("DownloaderMock.Download got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDownload.DownloadMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.url != nil && !minimock.Equal(*mm_want_ptrs.url, mm_got.url) {
				mmDownload.t.Errorf("DownloaderMock.Download got unexpected parameter url, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDownload.DownloadMock.defaultExpectation.expectationOrigins.originUrl, *mm_want_ptrs.url, mm_got.url, minimock.Diff(*mm_want_ptrs.url, mm_got.url))
			}

			if mm_want_ptrs.filepaths != nil && !minimock.Equal(*mm_want_ptrs.filepaths, mm_got.filepaths) {
				mmDownload.t.Errorf("DownloaderMock.Download got unexpected parameter filepaths, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDownload.DownloadMock.defaultExpectation.expectationOrigins.originFilepaths, *mm_want_ptrs.filepaths, mm_got.filepaths, minimock.Diff(*mm_want_ptrs.filepaths, mm_got.filepaths))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDownload.t.Errorf("DownloaderMock.Download got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDownload.DownloadMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDownload.DownloadMock.defaultExpectation.results
		if mm_results == nil {
			mmDownload.t.Fatal("No results are set for the DownloaderMock.Download")
		}
		return (*mm_results).filepathsMap, (*mm_results).err
	}
	if mmDownload.funcDownload != nil {
		return mmDownload.funcDownload(ctx, url, filepaths)
	}
	mmDownload.t.Fatalf("Unexpected call to DownloaderMock.Download. %v %v %v", ctx, url, filepaths)
	return
}

// DownloadAfterCounter returns a count of finished DownloaderMock.Download invocations
func (mmDownload *DownloaderMock) DownloadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDownload.afterDownloadCounter)
}

// DownloadBeforeCounter returns a count of DownloaderMock.Download invocations
func (mmDownload *DownloaderMock) DownloadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDownload.beforeDownloadCounter)
}

// Calls returns a list of arguments used in each call to DownloaderMock.Download.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDownload *mDownloaderMockDownload) Calls() []*DownloaderMockDownloadParams {
	mmDownload.mutex.RLock()

	argCopy := make([]*DownloaderMockDownloadParams, len(mmDownload.callArgs))
	copy(argCopy, mmDownload.callArgs)

	mmDownload.mutex.RUnlock()

	return argCopy
}

// MinimockDownloadDone returns true if the count of the Download invocations corresponds
// the number of defined expectations
func (m *DownloaderMock) MinimockDownloadDone() bool {
	if m.DownloadMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DownloadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DownloadMock.invocationsDone()
}

// MinimockDownloadInspect logs each unmet expectation
func (m *DownloaderMock) MinimockDownloadInspect() {
	for _, e := range m.DownloadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DownloaderMock.Download at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDownloadCounter := mm_atomic.LoadUint64(&m.afterDownloadCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DownloadMock.defaultExpectation != nil && afterDownloadCounter < 1 {
		if m.DownloadMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to DownloaderMock.Download at\n%s", m.DownloadMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to DownloaderMock.Download at\n%s with params: %#v", m.DownloadMock.defaultExpectation.expectationOrigins.origin, *m.DownloadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDownload != nil && afterDownloadCounter < 1 {
		m.t.Errorf("Expected call to DownloaderMock.Download at\n%s", m.funcDownloadOrigin)
	}

	if !m.DownloadMock.invocationsDone() && afterDownloadCounter > 0 {
		m.t.Errorf("Expected %d calls to DownloaderMock.Download at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DownloadMock.expectedInvocations), m.DownloadMock.expectedInvocationsOrigin, afterDownloadCounter)
	}
}

type mDownloaderMockGetMetadata struct {
	optional           bool
	mock               *DownloaderMock
	defaultExpectation *DownloaderMockGetMetadataExpectation
	expectations       []*DownloaderMockGetMetadataExpectation

	callArgs []*DownloaderMockGetMetadataParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// DownloaderMockGetMetadataExpectation specifies expectation struct of the Downloader.GetMetadata
type DownloaderMockGetMetadataExpectation struct {
	mock               *DownloaderMock
	params             *DownloaderMockGetMetadataParams
	paramPtrs          *DownloaderMockGetMetadataParamPtrs
	expectationOrigins DownloaderMockGetMetadataExpectationOrigins
	results            *DownloaderMockGetMetadataResults
	returnOrigin       string
	Counter            uint64
}

// DownloaderMockGetMetadataParams contains parameters of the Downloader.GetMetadata
type DownloaderMockGetMetadataParams struct {
	ctx context.Context
	url string
}

// DownloaderMockGetMetadataParamPtrs contains pointers to parameters of the Downloader.GetMetadata
type DownloaderMockGetMetadataParamPtrs struct {
	ctx *context.Context
	url *string
}

// DownloaderMockGetMetadataResults contains results of the Downloader.GetMetadata
type DownloaderMockGetMetadataResults struct {
	mp1 *mm_service.Metadata
	err error
}

// DownloaderMockGetMetadataOrigins contains origins of expectations of the Downloader.GetMetadata
type DownloaderMockGetMetadataExpectationOrigins struct {
	origin    string
	originCtx string
	originUrl string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetMetadata *mDownloaderMockGetMetadata) Optional() *mDownloaderMockGetMetadata {
	mmGetMetadata.optional = true
	return mmGetMetadata
}

// Expect sets up expected params for Downloader.GetMetadata
func (mmGetMetadata *mDownloaderMockGetMetadata) Expect(ctx context.Context, url string) *mDownloaderMockGetMetadata {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Set")
	}

	if mmGetMetadata.defaultExpectation == nil {
		mmGetMetadata.defaultExpectation = &DownloaderMockGetMetadataExpectation{}
	}

	if mmGetMetadata.defaultExpectation.paramPtrs != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by ExpectParams functions")
	}

	mmGetMetadata.defaultExpectation.params = &DownloaderMockGetMetadataParams{ctx, url}
	mmGetMetadata.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetMetadata.expectations {
		if minimock.Equal(e.params, mmGetMetadata.defaultExpectation.params) {
			mmGetMetadata.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetMetadata.defaultExpectation.params)
		}
	}

	return mmGetMetadata
}

// ExpectCtxParam1 sets up expected param ctx for Downloader.GetMetadata
func (mmGetMetadata *mDownloaderMockGetMetadata) ExpectCtxParam1(ctx context.Context) *mDownloaderMockGetMetadata {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Set")
	}

	if mmGetMetadata.defaultExpectation == nil {
		mmGetMetadata.defaultExpectation = &DownloaderMockGetMetadataExpectation{}
	}

	if mmGetMetadata.defaultExpectation.params != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Expect")
	}

	if mmGetMetadata.defaultExpectation.paramPtrs == nil {
		mmGetMetadata.defaultExpectation.paramPtrs = &DownloaderMockGetMetadataParamPtrs{}
	}
	mmGetMetadata.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetMetadata.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetMetadata
}

// ExpectUrlParam2 sets up expected param url for Downloader.GetMetadata
func (mmGetMetadata *mDownloaderMockGetMetadata) ExpectUrlParam2(url string) *mDownloaderMockGetMetadata {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Set")
	}

	if mmGetMetadata.defaultExpectation == nil {
		mmGetMetadata.defaultExpectation = &DownloaderMockGetMetadataExpectation{}
	}

	if mmGetMetadata.defaultExpectation.params != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Expect")
	}

	if mmGetMetadata.defaultExpectation.paramPtrs == nil {
		mmGetMetadata.defaultExpectation.paramPtrs = &DownloaderMockGetMetadataParamPtrs{}
	}
	mmGetMetadata.defaultExpectation.paramPtrs.url = &url
	mmGetMetadata.defaultExpectation.expectationOrigins.originUrl = minimock.CallerInfo(1)

	return mmGetMetadata
}

// Inspect accepts an inspector function that has same arguments as the Downloader.GetMetadata
func (mmGetMetadata *mDownloaderMockGetMetadata) Inspect(f func(ctx context.Context, url string)) *mDownloaderMockGetMetadata {
	if mmGetMetadata.mock.inspectFuncGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("Inspect function is already set for DownloaderMock.GetMetadata")
	}

	mmGetMetadata.mock.inspectFuncGetMetadata = f

	return mmGetMetadata
}

// Return sets up results that will be returned by Downloader.GetMetadata
func (mmGetMetadata *mDownloaderMockGetMetadata) Return(mp1 *mm_service.Metadata, err error) *DownloaderMock {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Set")
	}

	if mmGetMetadata.defaultExpectation == nil {
		mmGetMetadata.defaultExpectation = &DownloaderMockGetMetadataExpectation{mock: mmGetMetadata.mock}
	}
	mmGetMetadata.defaultExpectation.results = &DownloaderMockGetMetadataResults{mp1, err}
	mmGetMetadata.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetMetadata.mock
}

// Set uses given function f to mock the Downloader.GetMetadata method
func (mmGetMetadata *mDownloaderMockGetMetadata) Set(f func(ctx context.Context, url string) (mp1 *mm_service.Metadata, err error)) *DownloaderMock {
	if mmGetMetadata.defaultExpectation != nil {
		mmGetMetadata.mock.t.Fatalf("Default expectation is already set for the Downloader.GetMetadata method")
	}

	if len(mmGetMetadata.expectations) > 0 {
		mmGetMetadata.mock.t.Fatalf("Some expectations are already set for the Downloader.GetMetadata method")
	}

	mmGetMetadata.mock.funcGetMetadata = f
	mmGetMetadata.mock.funcGetMetadataOrigin = minimock.CallerInfo(1)
	return mmGetMetadata.mock
}

// When sets expectation for the Downloader.GetMetadata which will trigger the result defined by the following
// Then helper
func (mmGetMetadata *mDownloaderMockGetMetadata) When(ctx context.Context, url string) *DownloaderMockGetMetadataExpectation {
	if mmGetMetadata.mock.funcGetMetadata != nil {
		mmGetMetadata.mock.t.Fatalf("DownloaderMock.GetMetadata mock is already set by Set")
	}

	expectation := &DownloaderMockGetMetadataExpectation{
		mock:               mmGetMetadata.mock,
		params:             &DownloaderMockGetMetadataParams{ctx, url},
		expectationOrigins: DownloaderMockGetMetadataExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetMetadata.expectations = append(mmGetMetadata.expectations, expectation)
	return expectation
}

// Then sets up Downloader.GetMetadata return parameters for the expectation previously defined by the When method
func (e *DownloaderMockGetMetadataExpectation) Then(mp1 *mm_service.Metadata, err error) *DownloaderMock {
	e.results = &DownloaderMockGetMetadataResults{mp1, err}
	return e.mock
}

// Times sets number of times Downloader.GetMetadata should be invoked
func (mmGetMetadata *mDownloaderMockGetMetadata) Times(n uint64) *mDownloaderMockGetMetadata {
	if n == 0 {
		mmGetMetadata.mock.t.Fatalf("Times of DownloaderMock.GetMetadata mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetMetadata.expectedInvocations, n)
	mmGetMetadata.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetMetadata
}

func (mmGetMetadata *mDownloaderMockGetMetadata) invocationsDone() bool {
	if len(mmGetMetadata.expectations) == 0 && mmGetMetadata.defaultExpectation == nil && mmGetMetadata.mock.funcGetMetadata == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetMetadata.mock.afterGetMetadataCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetMetadata.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetMetadata implements mm_service.Downloader
func (mmGetMetadata *DownloaderMock) GetMetadata(ctx context.Context, url string) (mp1 *mm_service.Metadata, err error) {
	mm_atomic.AddUint64(&mmGetMetadata.beforeGetMetadataCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMetadata.afterGetMetadataCounter, 1)

	mmGetMetadata.t.Helper()

	if mmGetMetadata.inspectFuncGetMetadata != nil {
		mmGetMetadata.inspectFuncGetMetadata(ctx, url)
	}

	mm_params := DownloaderMockGetMetadataParams{ctx, url}

	// Record call args
	mmGetMetadata.GetMetadataMock.mutex.Lock()
	mmGetMetadata.GetMetadataMock.callArgs = append(mmGetMetadata.GetMetadataMock.callArgs, &mm_params)
	mmGetMetadata.GetMetadataMock.mutex.Unlock()

	for _, e := range mmGetMetadata.GetMetadataMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp1, e.results.err
		}
	}

	if mmGetMetadata.GetMetadataMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMetadata.GetMetadataMock.defaultExpectation.Counter, 1)
		mm_want := mmGetMetadata.GetMetadataMock.defaultExpectation.params
		mm_want_ptrs := mmGetMetadata.GetMetadataMock.defaultExpectation.paramPtrs

		mm_got := DownloaderMockGetMetadataParams{ctx, url}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetMetadata.t.Errorf("DownloaderMock.GetMetadata got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetMetadata.GetMetadataMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.url != nil && !minimock.Equal(*mm_want_ptrs.url, mm_got.url) {
				mmGetMetadata.t.Errorf("DownloaderMock.GetMetadata got unexpected parameter url, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetMetadata.GetMetadataMock.defaultExpectation.expectationOrigins.originUrl, *mm_want_ptrs.url, mm_got.url, minimock.Diff(*mm_want_ptrs.url, mm_got.url))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetMetadata.t.Errorf("DownloaderMock.GetMetadata got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetMetadata.GetMetadataMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetMetadata.GetMetadataMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMetadata.t.Fatal("No results are set for the DownloaderMock.GetMetadata")
		}
		return (*mm_results).mp1, (*mm_results).err
	}
	if mmGetMetadata.funcGetMetadata != nil {
		return mmGetMetadata.funcGetMetadata(ctx, url)
	}
	mmGetMetadata.t.Fatalf("Unexpected call to DownloaderMock.GetMetadata. %v %v", ctx, url)
	return
}

// GetMetadataAfterCounter returns a count of finished DownloaderMock.GetMetadata invocations
func (mmGetMetadata *DownloaderMock) GetMetadataAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMetadata.afterGetMetadataCounter)
}

// GetMetadataBeforeCounter returns a count of DownloaderMock.GetMetadata invocations
func (mmGetMetadata *DownloaderMock) GetMetadataBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMetadata.beforeGetMetadataCounter)
}

// Calls returns a list of arguments used in each call to DownloaderMock.GetMetadata.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetMetadata *mDownloaderMockGetMetadata) Calls() []*DownloaderMockGetMetadataParams {
	mmGetMetadata.mutex.RLock()

	argCopy := make([]*DownloaderMockGetMetadataParams, len(mmGetMetadata.callArgs))
	copy(argCopy, mmGetMetadata.callArgs)

	mmGetMetadata.mutex.RUnlock()

	return argCopy
}

// MinimockGetMetadataDone returns true if the count of the GetMetadata invocations corresponds
// the number of defined expectations
func (m *DownloaderMock) MinimockGetMetadataDone() bool {
	if m.GetMetadataMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMetadataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMetadataMock.invocationsDone()
}

// MinimockGetMetadataInspect logs each unmet expectation
func (m *DownloaderMock) MinimockGetMetadataInspect() {
	for _, e := range m.GetMetadataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DownloaderMock.GetMetadata at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetMetadataCounter := mm_atomic.LoadUint64(&m.afterGetMetadataCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMetadataMock.defaultExpectation != nil && afterGetMetadataCounter < 1 {
		if m.GetMetadataMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to DownloaderMock.GetMetadata at\n%s", m.GetMetadataMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to DownloaderMock.GetMetadata at\n%s with params: %#v", m.GetMetadataMock.defaultExpectation.expectationOrigins.origin, *m.GetMetadataMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMetadata != nil && afterGetMetadataCounter < 1 {
		m.t.Errorf("Expected call to DownloaderMock.GetMetadata at\n%s", m.funcGetMetadataOrigin)
	}

	if !m.GetMetadataMock.invocationsDone() && afterGetMetadataCounter > 0 {
		m.t.Errorf("Expected %d calls to DownloaderMock.GetMetadata at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMetadataMock.expectedInvocations), m.GetMetadataMock.expectedInvocationsOrigin, afterGetMetadataCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DownloaderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAcceptsURLInspect()

			m.MinimockDownloadInspect()

			m.MinimockGetMetadataInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DownloaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DownloaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAcceptsURLDone() &&
		m.MinimockDownloadDone() &&
		m.MinimockGetMetadataDone()
}
