// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UploaderMock implements mm_service.Uploader
type UploaderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcUpload          func(ctx context.Context, filepath string, url string) (err error)
	funcUploadOrigin    string
	inspectFuncUpload   func(ctx context.Context, filepath string, url string)
	afterUploadCounter  uint64
	beforeUploadCounter uint64
	UploadMock          mUploaderMockUpload
}

// NewUploaderMock returns a mock for mm_service.Uploader
func NewUploaderMock(t minimock.Tester) *UploaderMock {
	m := &UploaderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.UploadMock = mUploaderMockUpload{mock: m}
	m.UploadMock.callArgs = []*UploaderMockUploadParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUploaderMockUpload struct {
	optional           bool
	mock               *UploaderMock
	defaultExpectation *UploaderMockUploadExpectation
	expectations       []*UploaderMockUploadExpectation

	callArgs []*UploaderMockUploadParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UploaderMockUploadExpectation specifies expectation struct of the Uploader.Upload
type UploaderMockUploadExpectation struct {
	mock               *UploaderMock
	params             *UploaderMockUploadParams
	paramPtrs          *UploaderMockUploadParamPtrs
	expectationOrigins UploaderMockUploadExpectationOrigins
	results            *UploaderMockUploadResults
	returnOrigin       string
	Counter            uint64
}

// UploaderMockUploadParams contains parameters of the Uploader.Upload
type UploaderMockUploadParams struct {
	ctx      context.Context
	filepath string
	url      string
}

// UploaderMockUploadParamPtrs contains pointers to parameters of the Uploader.Upload
type UploaderMockUploadParamPtrs struct {
	ctx      *context.Context
	filepath *string
	url      *string
}

// UploaderMockUploadResults contains results of the Uploader.Upload
type UploaderMockUploadResults struct {
	err error
}

// UploaderMockUploadOrigins contains origins of expectations of the Uploader.Upload
type UploaderMockUploadExpectationOrigins struct {
	origin         string
	originCtx      string
	originFilepath string
	originUrl      string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpload *mUploaderMockUpload) Optional() *mUploaderMockUpload {
	mmUpload.optional = true
	return mmUpload
}

// Expect sets up expected params for Uploader.Upload
func (mmUpload *mUploaderMockUpload) Expect(ctx context.Context, filepath string, url string) *mUploaderMockUpload {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by Set")
	}

	if mmUpload.defaultExpectation == nil {
		mmUpload.defaultExpectation = &UploaderMockUploadExpectation{}
	}

	if mmUpload.defaultExpectation.paramPtrs != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by ExpectParams functions")
	}

	mmUpload.defaultExpectation.params = &UploaderMockUploadParams{ctx, filepath, url}
	mmUpload.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpload.expectations {
		if minimock.Equal(e.params, mmUpload.defaultExpectation.params) {
			mmUpload.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpload.defaultExpectation.params)
		}
	}

	return mmUpload
}

// ExpectCtxParam1 sets up expected param ctx for Uploader.Upload
func (mmUpload *mUploaderMockUpload) ExpectCtxParam1(ctx context.Context) *mUploaderMockUpload {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by Set")
	}

	if mmUpload.defaultExpectation == nil {
		mmUpload.defaultExpectation = &UploaderMockUploadExpectation{}
	}

	if mmUpload.defaultExpectation.params != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by Expect")
	}

	if mmUpload.defaultExpectation.paramPtrs == nil {
		mmUpload.defaultExpectation.paramPtrs = &UploaderMockUploadParamPtrs{}
	}
	mmUpload.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpload.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpload
}

// ExpectFilepathParam2 sets up expected param filepath for Uploader.Upload
func (mmUpload *mUploaderMockUpload) ExpectFilepathParam2(filepath string) *mUploaderMockUpload {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by Set")
	}

	if mmUpload.defaultExpectation == nil {
		mmUpload.defaultExpectation = &UploaderMockUploadExpectation{}
	}

	if mmUpload.defaultExpectation.params != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by Expect")
	}

	if mmUpload.defaultExpectation.paramPtrs == nil {
		mmUpload.defaultExpectation.paramPtrs = &UploaderMockUploadParamPtrs{}
	}
	mmUpload.defaultExpectation.paramPtrs.filepath = &filepath
	mmUpload.defaultExpectation.expectationOrigins.originFilepath = minimock.CallerInfo(1)

	return mmUpload
}

// ExpectUrlParam3 sets up expected param url for Uploader.Upload
func (mmUpload *mUploaderMockUpload) ExpectUrlParam3(url string) *mUploaderMockUpload {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by Set")
	}

	if mmUpload.defaultExpectation == nil {
		mmUpload.defaultExpectation = &UploaderMockUploadExpectation{}
	}

	if mmUpload.defaultExpectation.params != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by Expect")
	}

	if mmUpload.defaultExpectation.paramPtrs == nil {
		mmUpload.defaultExpectation.paramPtrs = &UploaderMockUploadParamPtrs{}
	}
	mmUpload.defaultExpectation.paramPtrs.url = &url
	mmUpload.defaultExpectation.expectationOrigins.originUrl = minimock.CallerInfo(1)

	return mmUpload
}

// Inspect accepts an inspector function that has same arguments as the Uploader.Upload
func (mmUpload *mUploaderMockUpload) Inspect(f func(ctx context.Context, filepath string, url string)) *mUploaderMockUpload {
	if mmUpload.mock.inspectFuncUpload != nil {
		mmUpload.mock.t.Fatalf("Inspect function is already set for UploaderMock.Upload")
	}

	mmUpload.mock.inspectFuncUpload = f

	return mmUpload
}

// Return sets up results that will be returned by Uploader.Upload
func (mmUpload *mUploaderMockUpload) Return(err error) *UploaderMock {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by Set")
	}

	if mmUpload.defaultExpectation == nil {
		mmUpload.defaultExpectation = &UploaderMockUploadExpectation{mock: mmUpload.mock}
	}
	mmUpload.defaultExpectation.results = &UploaderMockUploadResults{err}
	mmUpload.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpload.mock
}

// Set uses given function f to mock the Uploader.Upload method
func (mmUpload *mUploaderMockUpload) Set(f func(ctx context.Context, filepath string, url string) (err error)) *UploaderMock {
	if mmUpload.defaultExpectation != nil {
		mmUpload.mock.t.Fatalf("Default expectation is already set for the Uploader.Upload method")
	}

	if len(mmUpload.expectations) > 0 {
		mmUpload.mock.t.Fatalf("Some expectations are already set for the Uploader.Upload method")
	}

	mmUpload.mock.funcUpload = f
	mmUpload.mock.funcUploadOrigin = minimock.CallerInfo(1)
	return mmUpload.mock
}

// When sets expectation for the Uploader.Upload which will trigger the result defined by the following
// Then helper
func (mmUpload *mUploaderMockUpload) When(ctx context.Context, filepath string, url string) *UploaderMockUploadExpectation {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("UploaderMock.Upload mock is already set by Set")
	}

	expectation := &UploaderMockUploadExpectation{
		mock:               mmUpload.mock,
		params:             &UploaderMockUploadParams{ctx, filepath, url},
		expectationOrigins: UploaderMockUploadExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpload.expectations = append(mmUpload.expectations, expectation)
	return expectation
}

// Then sets up Uploader.Upload return parameters for the expectation previously defined by the When method
func (e *UploaderMockUploadExpectation) Then(err error) *UploaderMock {
	e.results = &UploaderMockUploadResults{err}
	return e.mock
}

// Times sets number of times Uploader.Upload should be invoked
func (mmUpload *mUploaderMockUpload) Times(n uint64) *mUploaderMockUpload {
	if n == 0 {
		mmUpload.mock.t.Fatalf("Times of UploaderMock.Upload mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpload.expectedInvocations, n)
	mmUpload.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpload
}

func (mmUpload *mUploaderMockUpload) invocationsDone() bool {
	if len(mmUpload.expectations) == 0 && mmUpload.defaultExpectation == nil && mmUpload.mock.funcUpload == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpload.mock.afterUploadCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpload.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Upload implements mm_service.Uploader
func (mmUpload *UploaderMock) Upload(ctx context.Context, filepath string, url string) (err error) {
	mm_atomic.AddUint64(&mmUpload.beforeUploadCounter, 1)
	defer mm_atomic.AddUint64(&mmUpload.afterUploadCounter, 1)

	mmUpload.t.Helper()

	if mmUpload.inspectFuncUpload != nil {
		mmUpload.inspectFuncUpload(ctx, filepath, url)
	}

	mm_params := UploaderMockUploadParams{ctx, filepath, url}

	// Record call args
	mmUpload.UploadMock.mutex.Lock()
	mmUpload.UploadMock.callArgs = append(mmUpload.UploadMock.callArgs, &mm_params)
	mmUpload.UploadMock.mutex.Unlock()

	for _, e := range mmUpload.UploadMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpload.UploadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpload.UploadMock.defaultExpectation.Counter, 1)
		mm_want := mmUpload.UploadMock.defaultExpectation.params
		mm_want_ptrs := mmUpload.UploadMock.defaultExpectation.paramPtrs

		mm_got := UploaderMockUploadParams{ctx, filepath, url}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpload.t.Errorf("UploaderMock.Upload got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpload.UploadMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.filepath != nil && !minimock.Equal(*mm_want_ptrs.filepath, mm_got.filepath) {
				mmUpload.t.Errorf("UploaderMock.Upload got unexpected parameter filepath, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpload.UploadMock.defaultExpectation.expectationOrigins.originFilepath, *mm_want_ptrs.filepath, mm_got.filepath, minimock.Diff(*mm_want_ptrs.filepath, mm_got.filepath))
			}

			if mm_want_ptrs.url != nil && !minimock.Equal(*mm_want_ptrs.url, mm_got.url) {
				mmUpload.t.Errorf("UploaderMock.Upload got unexpected parameter url, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpload.UploadMock.defaultExpectation.expectationOrigins.originUrl, *mm_want_ptrs.url, mm_got.url, minimock.Diff(*mm_want_ptrs.url, mm_got.url))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpload.t.Errorf("UploaderMock.Upload got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpload.UploadMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpload.UploadMock.defaultExpectation.results
		if mm_results == nil {
			mmUpload.t.Fatal("No results are set for the UploaderMock.Upload")
		}
		return (*mm_results).err
	}
	if mmUpload.funcUpload != nil {
		return mmUpload.funcUpload(ctx, filepath, url)
	}
	mmUpload.t.Fatalf("Unexpected call to UploaderMock.Upload. %v %v %v", ctx, filepath, url)
	return
}

// UploadAfterCounter returns a count of finished UploaderMock.Upload invocations
func (mmUpload *UploaderMock) UploadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpload.afterUploadCounter)
}

// UploadBeforeCounter returns a count of UploaderMock.Upload invocations
func (mmUpload *UploaderMock) UploadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpload.beforeUploadCounter)
}

// Calls returns a list of arguments used in each call to UploaderMock.Upload.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpload *mUploaderMockUpload) Calls() []*UploaderMockUploadParams {
	mmUpload.mutex.RLock()

	argCopy := make([]*UploaderMockUploadParams, len(mmUpload.callArgs))
	copy(argCopy, mmUpload.callArgs)

	mmUpload.mutex.RUnlock()

	return argCopy
}

// MinimockUploadDone returns true if the count of the Upload invocations corresponds
// the number of defined expectations
func (m *UploaderMock) MinimockUploadDone() bool {
	if m.UploadMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UploadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UploadMock.invocationsDone()
}

// MinimockUploadInspect logs each unmet expectation
func (m *UploaderMock) MinimockUploadInspect() {
	for _, e := range m.UploadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UploaderMock.Upload at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUploadCounter := mm_atomic.LoadUint64(&m.afterUploadCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UploadMock.defaultExpectation != nil && afterUploadCounter < 1 {
		if m.UploadMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UploaderMock.Upload at\n%s", m.UploadMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UploaderMock.Upload at\n%s with params: %#v", m.UploadMock.defaultExpectation.expectationOrigins.origin, *m.UploadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpload != nil && afterUploadCounter < 1 {
		m.t.Errorf("Expected call to UploaderMock.Upload at\n%s", m.funcUploadOrigin)
	}

	if !m.UploadMock.invocationsDone() && afterUploadCounter > 0 {
		m.t.Errorf("Expected %d calls to UploaderMock.Upload at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UploadMock.expectedInvocations), m.UploadMock.expectedInvocationsOrigin, afterUploadCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UploaderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockUploadInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UploaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UploaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockUploadDone()
}
